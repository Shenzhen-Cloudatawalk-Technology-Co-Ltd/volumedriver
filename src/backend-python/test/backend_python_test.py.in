import random
import subprocess
import nose
import time
import unittest
import os
import types
import sys
import shutil
from string import Template


from volumedriver.backend import Backend

_THISDIR = os.path.dirname(os.path.abspath(__file__))


class BackendTest(unittest.TestCase):

    def setUp(self):
        self.backend_path = os.path.join(_THISDIR, 'testlocalbackend')
        os.mkdir(self.backend_path)
        self.configuration_template = Template('''{
    "backend_connection_manager":
    {
        "backend_type": "LOCAL",
        "local_connection_path": "$backend_path",
        "local_connection_tv_sec": "0",
        "local_connection_tv_nsec": "0"
    }
}''')
        self.configuration = self.configuration_template.substitute(
            backend_path=self.backend_path)
        self.configuration_file = os.path.join(_THISDIR, 'configuration_dump')
        with open(self.configuration_file, 'w') as f:
            f.write(self.configuration)

    def tearDown(self):
        shutil.rmtree(self.backend_path)
        os.unlink(self.configuration_file)

    def test_namespace_existence(self):
        connection_manager = Backend.BackendConnectionManager(self.configuration_file)
        bi = connection_manager.create_backend_interface("a-namespace")
        self.assertFalse(bi.namespace_exists())

    def test_namespace_creation_and_removal(self):
        connection_manager = Backend.BackendConnectionManager(self.configuration_file)
        ns = "a-namespace"
        bi = connection_manager.create_backend_interface(ns)
        self.assertFalse(bi.namespace_exists())
        bi.create_namespace()
        self.assertTrue(bi.namespace_exists())
        bi.remove_namespace()
        self.assertFalse(bi.namespace_exists())

    def test_upload(self):
        connection_manager = Backend.BackendConnectionManager(self.configuration_file)
        ns = "a-namespace"
        bi = connection_manager.create_backend_interface(ns)
        bi.create_namespace()
        object_name = "an-object"
        self.assertFalse(bi.object_exists(object_name))
        bi.write(self.configuration_file,
                 object_name,
                 Backend.OverwriteObject.F)
        self.assertTrue(bi.object_exists(object_name))
        self.assertRaises(RuntimeError,
                          bi.write,
                          self.configuration_file,
                          object_name,
                          Backend.OverwriteObject.F)
        bi.write(self.configuration_file,
                 object_name,
                 Backend.OverwriteObject.T)
        bi.remove(object_name,
                  False)
        self.assertFalse(bi.object_exists(object_name))


# Local Variables: **
# mode: python **
# compile-command: "./runtest.sh test.py:BackendTest" **
# End: **
